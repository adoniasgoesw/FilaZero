import { testConnection, checkConnectionHealth, closePool } from './config/db.js';
import dotenv from 'dotenv';

// Carrega as vari√°veis de ambiente
dotenv.config();

console.log('üîç Testando conectividade com o banco de dados...');
console.log('üìä Configura√ß√µes:');
console.log('- NODE_ENV:', process.env.NODE_ENV);
console.log('- DATABASE_URL:', process.env.DATABASE_URL ? 'Definida' : 'N√£o definida');

async function runTests() {
  try {
    console.log('\n1Ô∏è‚É£ Teste b√°sico de conex√£o...');
    const basicTest = await testConnection();
    
    if (basicTest) {
      console.log('‚úÖ Teste b√°sico passou');
      
      console.log('\n2Ô∏è‚É£ Teste de sa√∫de da conex√£o...');
      const healthTest = await checkConnectionHealth();
      
      if (healthTest) {
        console.log('‚úÖ Teste de sa√∫de passou');
        
        console.log('\n3Ô∏è‚É£ Teste de query simples...');
        const { query } = await import('./config/db.js');
        const result = await query('SELECT NOW() as timestamp, version() as version');
        console.log('‚úÖ Query executada com sucesso:', result.rows[0]);
        
        console.log('\n4Ô∏è‚É£ Teste de query de clientes...');
        const clientesResult = await query('SELECT COUNT(*) as total FROM clientes');
        console.log('‚úÖ Query de clientes executada:', clientesResult.rows[0]);
        
      } else {
        console.log('‚ùå Teste de sa√∫de falhou');
      }
    } else {
      console.log('‚ùå Teste b√°sico falhou');
    }
    
  } catch (error) {
    console.error('‚ùå Erro durante os testes:', error);
  } finally {
    console.log('\nüîö Fechando conex√µes...');
    await closePool();
    process.exit(0);
  }
}

runTests();























